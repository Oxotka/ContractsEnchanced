#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПИД_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущаяДата = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	
КонецПроцедуры

&НаСервере
Процедура ПИД_ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СвернутьРазвернутьПанель(СвернутьПанель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПИД_ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НЕ (НавигационнаяСсылкаФорматированнойСтроки = "ЗадолженностьПоставщикам" ИЛИ НавигационнаяСсылкаФорматированнойСтроки = "ЗадолженностьПокупателей") Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(ЭтотОбъект);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, "Контрагент", ТекущиеДанные.Владелец, ВидСравненияКомпоновкиДанных.Равно);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, "Договор", ТекущиеДанные.Ссылка, ВидСравненияКомпоновкиДанных.Равно);
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки",          Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки",            2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Если ЭтоДоговорСПокупателем(ТекущиеДанные.ВидДоговора) Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", "ЗадолженностьПокупателей");
		ОткрытьФорму("Отчет.ЗадолженностьПокупателей.Форма.ФормаОтчета", ПараметрыОтчета, ЭтотОбъект);
	ИначеЕсли ЭтоДоговорСПоставщиком(ТекущиеДанные.ВидДоговора) Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", "ЗадолженностьПоставщикам");
		ОткрытьФорму("Отчет.ЗадолженностьПоставщикам.Форма.ФормаОтчета", ПараметрыОтчета, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПИД_ДекорацияСвернутьНажатие(Элемент)
	СвернутьПанель = НЕ СвернутьПанель;
	СвернутьРазвернутьПанель(СвернутьПанель);
КонецПроцедуры

&НаКлиенте
Процедура ПИД_ДекорацияРазвернутьНажатие(Элемент)
	СвернутьПанель = НЕ СвернутьПанель;
	СвернутьРазвернутьПанель(СвернутьПанель);
КонецПроцедуры

&НаКлиенте
Процедура ПИД_ДекорацияДокументыНажатие(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ДоговорКонтрагента", ТекущиеДанные.Ссылка));
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыПоДоговоруКонтрагента");
	
	ОткрытьФорму("ЖурналДокументов.ЖурналОпераций.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура ПИД_СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтроки", 0.1, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПИД_СоздатьСчетПокупателю(Команда)
	СоздатьДокумент("СчетНаОплатуПокупателю", "Продажа");
КонецПроцедуры

&НаКлиенте
Процедура ПИД_СоздатьРеализацию(Команда)
	СоздатьДокумент("РеализацияТоваровУслуг", "Продажа");
КонецПроцедуры

&НаКлиенте
Процедура ПИД_СоздатьАктОказанияУслуг(Команда)
	СоздатьДокумент("АктОбОказанииПроизводственныхУслуг", "Продажа");
КонецПроцедуры

&НаКлиенте
Процедура ПИД_СоздатьАктСверкиВзаиморасчетов(Команда)
	СоздатьДокумент("АктСверкиВзаиморасчетов");
КонецПроцедуры

&НаКлиенте
Процедура ПИД_СоздатьПоступлениеТоваровУслуг(Команда)
	СоздатьДокумент("ПоступлениеТоваровУслуг", "Покупка");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РазместитьДанные(Знач Договор)
	
	ДанныеДоговора = ДанныеДляЗаполненияПоДоговору(Договор);
	
	Элементы.ДекорацияНаименование.Заголовок = ДанныеДоговора.Наименование;
	
	Если ДанныеДоговора.ДоговорПодписан Тогда
		Элементы.ДекорацияНаименование.Подсказка = НСтр("ru='(подписан)'");
	Иначе
		Элементы.ДекорацияНаименование.Подсказка = НСтр("ru='(не подписан)'");
	КонецЕсли;
	
	Элементы.ДекорацияДолгНам.Заголовок = НадписьВзаиморасчетов(ДанныеДоговора.Дебиторка, "Дт");
	Элементы.ДекорацияДолгНаш.Заголовок = НадписьВзаиморасчетов(ДанныеДоговора.Кредиторка, "Кт");
	
	Если ПустаяСтрока(ДанныеДоговора.Номер) Тогда
		Элементы.ДекорацияНомер.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияНомер.Видимость = Истина;
		Элементы.ДекорацияНомер.Заголовок = СтрШаблон(НСтр("ru='№ %1'"), СокрЛП(ДанныеДоговора.Номер));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДоговора.Дата) И НЕ ЗначениеЗаполнено(ДанныеДоговора.СрокДействия) Тогда
		Элементы.ДекорацияДата.Видимость = Ложь;
	ИначеЕсли ЗначениеЗаполнено(ДанныеДоговора.Дата) И НЕ ЗначениеЗаполнено(ДанныеДоговора.СрокДействия) Тогда
		Элементы.ДекорацияДата.Видимость = Истина;
		Элементы.ДекорацияДата.Заголовок = СтрШаблон(НСтр("ru='Действует с %1'"), Формат(ДанныеДоговора.Дата, "ДФ=dd.MM.yy"));
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеДоговора.Дата) И ЗначениеЗаполнено(ДанныеДоговора.СрокДействия) Тогда
		Элементы.ДекорацияДата.Видимость = Истина;
		Элементы.ДекорацияДата.Заголовок = СтрШаблон(НСтр("ru='Действует по %1'"), Формат(ДанныеДоговора.СрокДействия, "ДФ=dd.MM.yy"));
	Иначе
		Элементы.ДекорацияДата.Видимость = Истина;
		Элементы.ДекорацияДата.Заголовок = СтрШаблон(НСтр("ru='Действует с %1 по %2'"), 
			Формат(ДанныеДоговора.Дата, "ДФ=dd.MM.yy"),
			Формат(ДанныеДоговора.СрокДействия, "ДФ=dd.MM.yy"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДоговора.ВидРасчетов) Тогда
		Элементы.ДекорацияВидРасчетов.Заголовок = ДанныеДоговора.ВидРасчетов;
		Элементы.ГруппаДополнительныеРеквизиты.Видимость = Истина;
	Иначе
		Элементы.ГруппаДополнительныеРеквизиты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДляЗаполненияПоДоговору(Знач Договор)
	
	ДанныеДоговора = Новый Структура;
	ДанныеДоговора.Вставить("Наименование",    "Наименование");
	ДанныеДоговора.Вставить("Номер",           "");
	ДанныеДоговора.Вставить("Дата",            '00010101');
	ДанныеДоговора.Вставить("СрокДействия",    '00010101');
	ДанныеДоговора.Вставить("ВидРасчетов",     "");
	ДанныеДоговора.Вставить("ДоговорПодписан", Ложь);
	ДанныеДоговора.Вставить("Дебиторка",       0);
	ДанныеДоговора.Вставить("Кредиторка",      0);
	
	СчетаУчетаРасчетовПокупателей = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПокупателей();
	СчетаУчетаРасчетовПоставщиков = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПоставщиков();
	
	МассивСчетов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетов, СчетаУчетаРасчетовПокупателей.СчетаСДокументомРасчетов, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетов, СчетаУчетаРасчетовПокупателей.СчетаБезДокументаРасчетов, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетов, СчетаУчетаРасчетовПоставщиков.СчетаСДокументомРасчетов, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетов, СчетаУчетаРасчетовПоставщиков.СчетаБезДокументаРасчетов, Истина);
	
	АналитикаРасчетов = Новый Массив;
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",                 Договор.Владелец);
	Запрос.УстановитьПараметр("Договор",                    Договор);
	Запрос.УстановитьПараметр("Организация",                Договор.Организация);
	Запрос.УстановитьПараметр("АналитикаРасчетов",          АналитикаРасчетов);
	Запрос.УстановитьПараметр("СчетаРасчетовСКонтрагентом", МассивСчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ СчетаУчетаРасчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаРасчетовСКонтрагентом)
	|	И НЕ Хозрасчетный.Валютный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Наименование,
	|	ДоговорыКонтрагентов.ВидВзаиморасчетов,
	|	ДоговорыКонтрагентов.Дата,
	|	ДоговорыКонтрагентов.Номер,
	|	ДоговорыКонтрагентов.СрокДействия,
	|	ДоговорыКонтрагентов.ДоговорПодписан
	|ПОМЕСТИТЬ ВТДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК Дебиторка,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК Кредиторка,
	|	ВТДоговоры.Ссылка КАК Договор,
	|	ВТДоговоры.Наименование,
	|	ВТДоговоры.ВидВзаиморасчетов как ВидРасчетов,
	|	ВТДоговоры.Дата,
	|	ВТДоговоры.Номер,
	|	ВТДоговоры.СрокДействия,
	|	ВТДоговоры.ДоговорПодписан
	|ИЗ
	|	ВТДоговоры КАК ВТДоговоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				,
	|				Счет В ИЕРАРХИИ
	|					(ВЫБРАТЬ
	|						СчетаУчетаРасчетов.Ссылка
	|					ИЗ
	|						СчетаУчетаРасчетов КАК СчетаУчетаРасчетов),
	|				&АналитикаРасчетов,
	|				Субконто1 = &Контрагент
	|					И Субконто2 = &Договор
	|					И &Организация = Организация) КАК ХозрасчетныйОстатки
	|		ПО ВТДоговоры.Контрагент = ХозрасчетныйОстатки.Субконто1
	|			И ВТДоговоры.Ссылка = ХозрасчетныйОстатки.Субконто2";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеДоговора, Выборка);
	КонецЕсли;
	
	Возврат ДанныеДоговора;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокумент(ИмяДокумента, ТипДокумента = "")
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗначенияЗаполнения = Новый Структура;
	
	ЗначенияЗаполнения.Вставить("Организация",        ТекущиеДанные.Организация);
	ЗначенияЗаполнения.Вставить("Контрагент",         ТекущиеДанные.Владелец);
	Если ПустаяСтрока(ТипДокумента)
		ИЛИ ЭтоДоговорСПокупателем(ТекущиеДанные.ВидДоговора) И ТипДокумента = "Продажа" 
		ИЛИ ЭтоДоговорСПоставщиком(ТекущиеДанные.ВидДоговора) И ТипДокумента = "Покупка" Тогда
		ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ИмяФормыДокумента = СтрШаблон("Документ.%1.ФормаОбъекта", ИмяДокумента);
	ОткрытьФорму(ИмяФормыДокумента, СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НадписьВзаиморасчетов(Знач Сумма, Знач ДтКт)
	
	КрупныйШрифт = Новый Шрифт(,11);
	МелкийШрифт = Новый Шрифт(,8);
	
	КомпонентыФС = Новый Массив;
	Если ДтКт = "Кт" Тогда
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Мы должны'") + " ", КрупныйШрифт));
		СсылкаНаОтчет = "ЗадолженностьПоставщикам";
	Иначе
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Должен нам'") + " ", КрупныйШрифт));
		СсылкаНаОтчет = "ЗадолженностьПокупателей";
	КонецЕсли;
	
	СуммаСтрокой = Формат(Сумма, "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
	ПозицияРазделителя = СтрНайти(СуммаСтрокой, ",");
	КомпонентыЧисла = Новый Массив;
	КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Лев(СуммаСтрокой, ПозицияРазделителя), КрупныйШрифт));
	КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Сред(СуммаСтрокой, ПозицияРазделителя+1), МелкийШрифт));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , СсылкаНаОтчет));
	КомпонентыФС.Добавить(" " + Константы.ВалютаРегламентированногоУчета.Получить());
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС, , ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);
	
КонецФункции

&НаКлиенте
Процедура ПриАктивизацииСтроки()
	
	Если СвернутьПанель Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазместитьДанные(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция ПользовательскиеНастройкиДляРасшифровки(Форма)
	
	НачалоПериода = НачалоМесяца(Форма.ТекущаяДата);
	КонецПериода = Форма.ТекущаяДата;
	
	// Инициализация пользовательских настроек
	// Добавим в настройки все параметры которые могут использоваться в отчетах руководителю
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация",      ОтборОрганизация);
	ДополнительныеСвойства.Вставить("НачалоПериода",    НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода",     КонецПериода);
	ДополнительныеСвойства.Вставить("Период",           Форма.ТекущаяДата);
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаСервере
Процедура СвернутьРазвернутьПанель(СвернутьПанель)
	
	Если СвернутьПанель Тогда
		Элементы.ПанельИнформации.Видимость = Ложь;
		Элементы.ГруппаЗаглушка.Видимость   = Истина;
	Иначе
		Элементы.ПанельИнформации.Видимость = Истина;
		Элементы.ГруппаЗаглушка.Видимость   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоДоговорСПокупателем(ВидДоговора)

	СПокупателем = Новый Массив;
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	
	Возврат (СПокупателем.Найти(ВидДоговора) <> Неопределено);

КонецФункции

&НаКлиенте
Функция ЭтоДоговорСПоставщиком(ВидДоговора)

	СПоставщиком = Новый Массив;
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	
	Возврат (СПоставщиком.Найти(ВидДоговора) <> Неопределено);
	
КонецФункции

#КонецОбласти